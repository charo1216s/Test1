Naming Rule

變數小寫開頭

類別大寫開頭，開頭使用名詞

方法小寫開頭，開頭使用動詞
Coding Rule

能用 for (String s : list ) 就不要用 for (int i =0….)

上 code review 之前先跑過 code inspection

上 code review 之前先用 IDE format (format) code.
Log 相關

在迴圈中印的log 要預測for的大小，太大會變成log file的負擔

不可印出機敏個資

不可用 System.out.println
SQL 相關 (資安相關)

不要使用 sql date

不要使用 + 號來串變數，例如 “select * from abc where 1=’”+var+”’”; ，而是用   “select * from abc where 1=:var “ or   “select * from abc where 1=?  “

若使用字串來組 SQL 語句，請不要直接使用用戶傳入的參數來組，可以使用選擇性方法組 SQL (防止sql injection)


錯誤示範

String orderType = request.getParameter("orderType");
String sql = "select * from table001 order t_id " + orderType;

比較適合的方式

String orderType = request.getParameter("orderType");
String sqlOrderType;
if("DESC".equal(orderType)) {
    sqlOrderType = "DESC";
} else {
    sqlOrderType = "ASC";
}
String sql = "select * from table001 order t_id " + sqlOrderType
 

有用到 store procedure 的時候，CallableStatement  在finally要記得關掉

若 DB 表格有欄位 (create_date, create_user 之類的)，User 給值需參照下面規則
   *  若為後台登入使用者人為操作，直接寫入登入操作人名稱
   *  若為程式自動執行，需給專案名稱相關且可辨識的 Name，目前規則如下
            若為 ScheduleWeb 專案執行， User 需為 Schedule_ 為開頭
            若為 myBookApi 專案執行， User 需為 MyBookApi_ 為開頭
            若為 DeliverWeb 專案執行， User 需為 DeliverWeb_ 為開頭




JSON Rule

若功能為JSON API，Service 或 Facade 層不該直接回傳 JSON String，應回傳 Value Object 或其他 Java 物件，JSON String 由 Controller 層進行轉換處理
JAVA 物件轉 JSON 物件需遵守以下規則
* 若 class member 為 null，則轉出的 JSON 不能含有此 field

class Vo {
    public String a;
    public String b;
    public String c;
}
  
...
Vo vo = new Vo();
vo.a = "ABC";
vo.b = null;
vo.c = "";
{
    a: "ABC",
    c: ""
}



Thread safe:

    1. 若為 spring bean，除非特別設定為 prototype，否則不要有 class member，否則會有 thread safe 問題

錯誤示範

@Component
public Class HelloService {
    public String userName = "";
    private String sayHello() {
        println("Hi, " + userName );
    }
}
比較適合的方式

@Component
public Class HelloService {
    private String sayHello(String userName) {
        println("Hi, " + userName );
    }
}
DAO命名規範

取資料的method使用前置詞get
寫入資料的method使用前置詞insert
刪除資料的method使用前置詞delete
修改資料的method使用前置詞update
 

Coding Style

請在開啟專案後，改用 UTF-8 編碼

不使用tab，縮排一律使用4個空格

eclipse過長換行的功能請關閉，或至少增加換行的標準

 

Controller 取值相關

若要從使用者輸入參數讀取檔案時，請過濾使用者輸入的參數，否則會有安全性問題

錯誤示範

String contentId = request.getParameter("contentId");
File contentFile = new File("/ebook/content/" + contentId);
  
// 若使用者輸入 contentId = "../../etc/passord" 就可取得系統檔案

比較適合的方式

String contentId = getParamWithoutSpecialChar(request,"contentId");
File contentFile = new File("/ebook/content/" + contentId);
 
...
  
public String getParamWithoutSpecialChar(HttpRequest request,String paramName) {
    String param = request.getParameter(paramName);
    return param.replaceAll("[^a-zA-Z0-9]","");
}
資安相關

特殊字元過濾

private String filterParameter(String value) {
  value = value.replaceAll("eval\\((.*)\\)", "");
  value = value.replaceAll("[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']", "\"\"");
  value = value.replaceAll("(?i)drop[\\s]*table", "");
  value = value.replaceAll("(?i)truncate[\\s]*table", "");
  value = value.replaceAll("(?i)delete[\\s]*from", "");
  value = value.replaceAll("(?i)select(.*)from", "");
  value = value.replaceAll("(?i)insert(.*)into", "");
  value = value.replaceAll("(?i)update(.*)set", "");
  value = value.replaceAll("(?i)alter(.*)table", "");
  value = value.replaceAll("(?i)rename(.*)to", "");
   
  return value;
}
使用 Spring 相關 Framwork , 請開啟 Spring Security CSRF 相關設定
以下是非必要遵守，但還是希望能注意

 

若為純供能描述程式碼，盡量能讓程式碼本身能夠描述功能，而非玩邏輯遊戲
      EX: 若買小說書者為 VIP，則送他此本書的前傳(多本)，若沒有前傳就不送

//..
  
if (isVip(user)) {
    List givingBooks = getPrequel(buyBook);
    if (!givingBooks.isEmpty()) {
        giveBook(user, givingBooks);
    }
}
 

 

 

//..
  
 List givingBooks = new ArrayList();
  
if (isVip(user)) {
    givingBooks = getPrequel(buyBook);
}
  
if (!givingBooks.isEmpty()) {
        giveBook(user, givingBooks);
}
 

 

 

 

    EX2: 若不是 PM 及 ADMIN 角色，則不能使用此功能

 

//..
  
if (isAdm(user) && isPM(user)) {
     gogoAction();
}
 

 

 

//..
  
// 因為 PM 一定是 Admin，所以只需要判斷是否為 PM 就好
if (isPM(user)) {
     gogoAction();
}
 
