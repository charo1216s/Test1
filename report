
能用 for (String s : list ) 就不要用 for (int i =0….)

SQL 相關 (資安相關)

不要使用 sql date

不要使用 + 號來串變數，例如 “select * from abc where 1=’”+var+”’”; ，而是用   “select * from abc where 1=:var “ or   “select * from abc where 1=?  “

若使用字串來組語句，請不要直接使用用戶傳入的參數來組，可以使用選擇性方法組 SQL (防止sql injection)

錯誤示範

String orderType = request.getParameter("orderType");
String sql = "select * from table001 order t_id " + orderType;

比較適合的方式

String orderType = request.getParameter("orderType");
String sqlOrderType;
if("DESC".equal(orderType)) {
    sqlOrderType = "DESC";
} else {
    sqlOrderType = "ASC";
}
String sql = "select * from table001 order t_id " + sqlOrderType
 
 
 不要使用 count(列名)或 count(常量)来替代 count(*)，count(*)是 SQL92 定义的 标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。 说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。 

 
 
若 DB 表格有欄位 (create_date, create_user 之類的)，User 給值需參照下面規則
   *  若為後台登入使用者人為操作，直接寫入登入操作人名稱
   *  若為程式自動執行，需給專案名稱相關且可辨識的 Name，目前規則如下
            若為 ScheduleWeb 專案執行， User 需為 Schedule_ 為開頭
            若為 myBookApi 專案執行， User 需為 MyBookApi_ 為開頭
            若為 DeliverWeb 專案執行， User 需為 DeliverWeb_ 為開頭

JSON Rule

若功能為JSON API，Service 或 Facade 層不該直接回傳 JSON String，應回傳 Value Object 或其他 Java 物件，JSON String 由 Controller 層進行轉換處理
JAVA 物件轉 JSON 物件需遵守以下規則
* 若 class member 為 null，則轉出的 JSON 不能含有此 field

class Vo {
    public String a;
    
    public String b;
    public String c;
}
  
...
Vo vo = new Vo();
vo.a = "ABC";
vo.b = null;
vo.c = "";
{
    a: "ABC",
    c: ""
}



Thread safe:

    1. 若為 spring bean，除非特別設定為 prototype，否則不要有 class member，否則會有 thread safe 問題

錯誤示範

@Component
public Class HelloService {
    public String userName = "";
    private String sayHello() {
        println("Hi, " + userName );
    }
}
比較適合的方式

@Component
public Class HelloService {
    private String sayHello(String userName) {
        println("Hi, " + userName );
    }
}
DAO命名規範

取資料的method使用前置詞get
寫入資料的method使用前置詞insert
刪除資料的method使用前置詞delete
修改資料的method使用前置詞update
 

Coding Style

請在開啟專案後，改用 UTF-8 編碼

不使用tab，縮排一律使用4個空格
- 如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时， 请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。

eclipse過長換行的功能請關閉，或至少增加換行的標準

循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。 说明：下例中，反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象， 然后进行 append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。 反例： String str = "start";      for (int i = 0; i < 100; i++) {          str = str + "hello";      }
 
 
使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无 内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。 
说明： String str = "a,b,c,,";  String[] ary = str.split(",");  // 预期大于 3，结果是 3 System.out.println(ary.length);

定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。 
反例：POJO 类的 gmtCreate 默认值为 new Date()，但是这个属性在数据提取时并没有置入具 体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。

Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。 
正例："test".equals(object); 反例：object.equals("test"); 

setter 方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在 getter/setter 方法中，不要增加业务逻辑，增加排查问题的难度。 
反例： public Integer getData() {      if (condition) {  return this.data + 100;  } else { return this.data - 100; }  }


类成员与方法访问控制从严：  1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。  2） 工具类不允许有 public 或 default 构造方法。  3） 类非 static 成员变量并且与子类共享，必须是 protected。   4） 类非 static 成员变量并且仅在本类使用，必须是 private。  5） 类 static 成员变量如果仅在本类使用，必须是 private。  6） 若是 static 成员变量，考虑是否为 final。  7） 类成员方法只供类内部调用，必须是 private。   8） 类成员方法只对继承类公开，那么限制为 protected。 说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。 思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 成员方法或
成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作 用域太大，无限制的到处跑，那么你会担心的。 
 

泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用 add 方 法，而<? super T>不能使用 get 方法，作为接口调用赋值时易出错。 说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内 容的，适合用<? extends T>。第二、经常往里插入的，适合用<? super T>。 



不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。 正例： List<String> list = new ArrayList<>();      list.add("1");      list.add("2");    Iterator<String> iterator = list.iterator();  while (iterator.hasNext()) {              String item = iterator.next();                       if (删除元素的条件) {                              iterator.remove();                 }      } 
反例： for (String item : list) {          if ("1".equals(item)) {              list.remove(item);          }      }  说明：以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的 结果吗？




表达异常的分支时，少用 if-else 方式，这种方式可以改写成： 
if (condition) {               ...              return obj;    }   // 接着写 else 的业务逻辑代码;  说明：如果非得使用 if()...else if()...else...方式表达逻辑，【强制】避免后续代码维 护困难，请勿超过 3 层。  正例：超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现， 其中卫语句示例如下： 
public void today() {      if (isBusy()) {   System.out.println(“change time.”);            return;      } 
 
     if (isFree()) {  System.out.println(“go to travel.”);             return;     } 
 
System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);      return; } 



Controller 取值相關

若要從使用者輸入參數讀取檔案時，請過濾使用者輸入的參數，否則會有安全性問題

錯誤示範

String contentId = request.getParameter("contentId");
File contentFile = new File("/ebook/content/" + contentId);
  
// 若使用者輸入 contentId = "../../etc/passord" 就可取得系統檔案

比較適合的方式

String contentId = getParamWithoutSpecialChar(request,"contentId");
File contentFile = new File("/ebook/content/" + contentId);
 
...
  
public String getParamWithoutSpecialChar(HttpRequest request,String paramName) {
    String param = request.getParameter(paramName);
    return param.replaceAll("[^a-zA-Z0-9]","");
}
資安相關

特殊字元過濾

private String filterParameter(String value) {
  value = value.replaceAll("eval\\((.*)\\)", "");
  value = value.replaceAll("[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']", "\"\"");
  value = value.replaceAll("(?i)drop[\\s]*table", "");
  value = value.replaceAll("(?i)truncate[\\s]*table", "");
  value = value.replaceAll("(?i)delete[\\s]*from", "");
  value = value.replaceAll("(?i)select(.*)from", "");
  value = value.replaceAll("(?i)insert(.*)into", "");
  value = value.replaceAll("(?i)update(.*)set", "");
  value = value.replaceAll("(?i)alter(.*)table", "");
  value = value.replaceAll("(?i)rename(.*)to", "");
   
  return value;
}
使用 Spring 相關 Framwork , 請開啟 Spring Security CSRF 相關設定
以下是非必要遵守，但還是希望能注意

 

若為純供能描述程式碼，盡量能讓程式碼本身能夠描述功能，而非玩邏輯遊戲
      EX: 若買小說書者為 VIP，則送他此本書的前傳(多本)，若沒有前傳就不送

//..
  
if (isVip(user)) {
    List givingBooks = getPrequel(buyBook);
    if (!givingBooks.isEmpty()) {
        giveBook(user, givingBooks);
    }
}
 

 

 

//..
  
 List givingBooks = new ArrayList();
  
if (isVip(user)) {
    givingBooks = getPrequel(buyBook);
}
  
if (!givingBooks.isEmpty()) {
        giveBook(user, givingBooks);
}
 

 

 

 

    EX2: 若不是 PM 及 ADMIN 角色，則不能使用此功能

 

//..
  
if (isAdm(user) && isPM(user)) {
     gogoAction();
}
 

 

 

//..
  
// 因為 PM 一定是 Admin，所以只需要判斷是否為 PM 就好
if (isPM(user)) {
     gogoAction();
}
 
